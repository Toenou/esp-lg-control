esphome:
  name: esp-wp-control
  on_boot:
    priority: 800
    then:
      lambda: !lambda |-
          //set initial states
          id(relay1).turn_off();
          if (id(toon_signal).state) {
            id(relay2).turn_on();
          } else {
            id(relay2).turn_off();
          }

packages:
  config_values: !include config/config.yaml

# Enable logging. Disable modbus controller debug messages
logger:
  logs:
    modbus_controller.sensor: WARN
    modbus_controller.output: WARN
    sensor: WARN

globals:
  - id: stooklijn_target
    type: int
    restore_value: no
    initial_value: '30'
  - id: force_update_stooklijn
    type: bool
    restore_value: no
    initial_value: 'true'
  - id: working_mode
    type: int
    restore_value: no
    initial_value: '0'
  - id: var_pendel_watertemp_target
    type: float
    restore_value: no
    initial_value: '30'
  - id: run_start
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: Kp
    type: float
    restore_value: no
    initial_value: "0.4"
  - id: Ki
    type: float
    restore_value: no
    initial_value: "0.01"
  - id: Kd
    type: float
    restore_value: no
    initial_value: "1"
  
number:
  - platform: template
    name: "Stooklijn offset"
    id: wp_stooklijn_offset
    min_value: -5
    max_value: 5
    initial_value: 0
    step: 1
    restore_value: yes
    unit_of_measurement: "°C"
    optimistic: true
    set_action:
      then:
        - lambda: |-
            id(force_update_stooklijn) = true;
  - platform: template
    id: stooklijn_min_oat
    name: "Stooklijn Minimum Buitentemperatuur"
    min_value: -25
    max_value: 10
    step: 1
    restore_value: yes
    initial_value: -15
    unit_of_measurement: "°C"
    optimistic: true
    set_action:
      then:
        - lambda: |-
            id(force_update_stooklijn) = true;
  - platform: template
    id: stooklijn_max_wtemp
    name: "Stooklijn Maximum Watertemperatuur"
    min_value: 30
    max_value: 60
    step: 1
    restore_value: yes
    initial_value: 60
    unit_of_measurement: "°C"
    optimistic: true
    set_action:
      then:
        - lambda: |-
            id(force_update_stooklijn) = true;
  - platform: template
    id: cooling_target_wtemp
    name: "Koelmodus Watertemperatuur"
    min_value: 16
    max_value: 20
    step: 1
    restore_value: yes
    initial_value: 18
    unit_of_measurement: "°C"
    optimistic: true
    set_action:
      then:
        - lambda: |-
            id(force_update_stooklijn) = true;

switch:
  - platform: gpio
    name: "WP Cool"
    pin: 18
    id: relay1
    interlock: &interlock_group [relay1, relay2]
    interlock_wait_time: 2000ms
    restore_mode: ALWAYS_OFF
    on_turn_off:
      then:
        - lambda: |-
            // update working mode
            id(working_mode) = 0;
    on_turn_on:
      then:
        - lambda: |-
            // update working mode
            id(working_mode) = 1;
            id(run_start) = true;
  - platform: gpio
    name: "WP Heat"
    pin: 19
    id: relay2
    interlock: *interlock_group
    interlock_wait_time: 20s
    restore_mode: ALWAYS_OFF
    on_turn_off:
      then:
        - lambda: |-
            // update working mode
            id(working_mode) = 0;
    on_turn_on:
      then:
        - lambda: |-
            // update working mode
            id(working_mode) = 2;
            id(run_start) = true;

# Eneco Toon anti pendel script. Toon sometimes temporarily switches the output off, while heat is still needed
# This script delays switching the heating of for 5 minutes. If heating switches back on within this timeframe the script stops
script:
  - id: anti_pendel
    mode: restart
    then:
      - delay: 300s
      - switch.turn_off: relay2

modbus:
  id: modbus_lg
  uart_id: uart_modbus
  send_wait_time: 200ms
  
uart:
  tx_pin: GPIO26
  rx_pin: GPIO25
  baud_rate: 9600
  id: uart_modbus
  parity: none
  data_bits: 8
  stop_bits: 1

modbus_controller:
  - id: lg
    address: 0x1 # the Modbus device addr
    modbus_id: modbus_lg
    update_interval: 10s #this is our main 'clock' all dependel logic follows this pace
    setup_priority: -10

output:
  - platform: modbus_controller
    modbus_controller_id: lg
    id: water_temp_target_output
    register_type: holding
    address: 2
    value_type: U_WORD
    multiply: 1000

binary_sensor:
  - platform: gpio # Toon input signal is connected to this input pin
    pin:
      number: GPIO27
      mode:
        input: true
        pullup: false
    name: "WP Toon Signal"
    id: toon_signal
    filters:
      - delayed_on: 500ms # Debounce
    on_press:
      - switch.turn_on: relay2
      - script.stop: anti_pendel # Anti pendel script, to delay switch off for 5 minutes
    on_release:
      - script.execute: anti_pendel
  - platform: modbus_controller
    modbus_controller_id: lg
    name: "Silent Mode"
    id: silent_mode
    register_type: discrete_input
    skip_updates: 3
    address: 7
  - platform: modbus_controller
    modbus_controller_id: lg
    name: "Pump Running"
    id: pump_running
    register_type: discrete_input
    skip_updates: 3
    address: 1
  - platform: modbus_controller
    modbus_controller_id: lg
    name: "Compressor Running"
    id: compressor_running
    register_type: discrete_input
    skip_updates: 3
    address: 3
  - platform: modbus_controller
    modbus_controller_id: lg
    name: "Defrosting"
    id: defrosting
    register_type: discrete_input
    skip_updates: 3
    address: 4
    
sensor:
  - platform: modbus_controller
    modbus_controller_id: lg
    name: "Water retour"
    id: water_temp_retour
    register_type: read
    address: 2
    unit_of_measurement: "°C"
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
  - platform: modbus_controller
    modbus_controller_id: lg
    name: "Water aanvoer"
    id: water_temp_aanvoer
    register_type: read
    address: 3
    unit_of_measurement: "°C"
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
    on_value:
      then:
        - lambda: |-
            //Main program logic this loop runs every 'clock' cycle when modbus data is received for this sensor
            //Useless if working mode = 0
            if(id(working_mode) == 0) return;
            static float prev_oat = 0;
            //integral for PID controller
            static float integral = 0;
            // previous error value. To calculate derivative
            static float last_error = 0;
            //pre run time, to prevent integral to saturate before compressor starts
            static int pre_run_time = 0;
            float error = 0;
            float derivative = 0;
            float temp_new_target = id(var_pendel_watertemp_target);
            
            // calculate stooklijn target
            float oat = round(id(buiten_temp).state);
            // if no oat change, no update needed, unless forced or first run
            if(prev_oat != oat || id(force_update_stooklijn) || id(run_start)){
              prev_oat = oat;
              //reset force boolean
              id(force_update_stooklijn) = false;
              if(id(working_mode) == 1){
                //Cooling
                ESP_LOGD("stooklijn", "Stooklijn, working mode is cooling");
                id(stooklijn_target) = id(cooling_target_wtemp).state;
              } else {
                //Heating
                //formula is wTemp = Z x Sqrt(-OAT+20) + 20
                //formula to calculate Z = wTempMax-20 / Sqrt(-OATMin + 20)
                const float Z = ((float)id(stooklijn_max_wtemp).state-20)/(float)sqrt((0 - (float)id(stooklijn_min_oat).state) + 20);
                ESP_LOGD("stooklijn", "Stooklijn, working mode is heating, with oat: %f, Z: %f",oat, Z);
                if(oat < id(stooklijn_min_oat).state) {
                  //if oat below minimum oat, clamp top minimum value
                  oat = id(stooklijn_min_oat).state;
                } else if (oat > 20) {
                  //if oat above max value, clamp tp maximum value
                  oat = 20;
                }
                id(stooklijn_target) = (int)round((Z * sqrt((0-oat)+20))+20);
                if(id(stooklijn_target) > id(stooklijn_max_wtemp).state) id(stooklijn_target) = id(stooklijn_max_wtemp).state;
                if(id(stooklijn_target) < 20) id(stooklijn_target) = 20;
              }
              ESP_LOGD("stooklijn", "New stooklijn target value (after correction): %d", id(stooklijn_target));
              //publish new stooklijn value to watertemp value sensor
              id(watertemp_target).publish_state(id(stooklijn_target));
            }
          
            //calculate new (anti pendel) target
            // very basic Pid Function
            if(id(run_start)){
              integral = 0;
              derivative = 0;
              last_error = 0;
              pre_run_time = 7; // equals 70 seconds. Based on 10s 'clock'
              //Set initial target through modbus (set level needs value between 0-1, so divide by 100)
              id(water_temp_target_output).set_level(id(stooklijn_target)*0.01);
              ESP_LOGD("anti-pendel", "Modbus initial target set: %d outlet: %f",id(stooklijn_target),x);
              id(run_start) = 0;
            }
            
            //Run when compressor is running, or pre_run_time expired
            if(id(compressor_running).state||pre_run_time == 0){
              if(pre_run_time > 0) pre_run_time = 0; //reset pre_run_time if compressor is running
              //calculate error
              error = id(stooklijn_target) - x;
              integral = integral + error;
              // clamp integral to max 2 degrees
              float iterm = integral * id(Ki);
              if (iterm > 2) {
                iterm = 2;
                integral = 2/id(Ki);
              } else if (iterm < -2) {
                iterm = -2;
                integral = -2/id(Ki);
              }
              derivative = error - last_error;
              last_error = error;
              float control_value = (error*id(Kp))+(iterm)+(id(Kd)*derivative);
            
              // control value clamping
              if (control_value > 10) control_value = 10;
              else if(control_value < -5) control_value = -5;
              temp_new_target = x + control_value;
              if(id(working_mode) == 1){
                // cooling
                temp_new_target = floor(temp_new_target*2)/2; // round down to nearest half (0 or 0.5)
                if(temp_new_target < id(stooklijn_target)) temp_new_target = id(stooklijn_target);
              } else {
                //heating
                temp_new_target = ceil(temp_new_target*2)/2; //round up to nearest half
                if(temp_new_target > id(stooklijn_target)) temp_new_target = id(stooklijn_target);
              }
              ESP_LOGD("anti-pendel", "PID error: %f i: %f d: %f P: %f I: %f D: %f",error,integral,derivative,error*id(Kp),iterm,derivative*id(Kd));
            } else {
              //update pre_run_time counter
              ESP_LOGD("anti-pendel", "Waiting for pre_run_time: %i",pre_run_time);
              if(pre_run_time > 0) pre_run_time--;
            }
            
            if(temp_new_target != id(var_pendel_watertemp_target)){
              //set new target
              id(var_pendel_watertemp_target) = temp_new_target;
              //update sensor
              id(pendel_watertemp_target).publish_state(id(var_pendel_watertemp_target));
              //update target through modbus (set level needs value between 0-1, so divide by 100)
              id(water_temp_target_output).set_level(id(var_pendel_watertemp_target)*0.01);
              ESP_LOGD("anti-pendel", "New pendel_watertemp_target set: %f outlet: %f",id(pendel_watertemp_target).state,x);
            }
  - platform: modbus_controller
    modbus_controller_id: lg
    name: "Garagetemperatuur"
    id: binnen_temp
    register_type: read
    address: 7
    unit_of_measurement: "°C"
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
  - platform: modbus_controller
    modbus_controller_id: lg
    name: "Flow Rate"
    id: current_flow_rate
    register_type: read
    address: 8
    unit_of_measurement: "L/m"
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
  - platform: modbus_controller
    modbus_controller_id: lg
    name: "Buitentemperatuur"
    id: buiten_temp
    register_type: read
    address: 12
    unit_of_measurement: "°C"
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
  - platform: modbus_controller
    modbus_controller_id: lg
    name: "Bedrijfsmodus"
    id: bedrijfsmodus
    register_type: read
    address: 1
    value_type: U_WORD
  - platform: modbus_controller
    modbus_controller_id: lg
    name: "Doeltemperatuur"
    id: doel_temp
    register_type: holding
    address: 2
    unit_of_measurement: "°C"
    value_type: U_WORD
    accuracy_decimals: 1
    skip_updates: 6
    filters:
      - multiply: 0.1
  - platform: template
    name: "Stooklijn Watertemp Target"
    id: watertemp_target
    unit_of_measurement: "°C"
    update_interval: 3600s
    lambda: |-
        return id(stooklijn_target);
  - platform: template
    name: "Anti-pendel Watertemp Target"
    id: pendel_watertemp_target
    unit_of_measurement: "°C"
    update_interval: 3600s
    lambda: |-
        return round(id(var_pendel_watertemp_target)*10)/10;
